# Generated by Django 4.2.1 on 2023-06-19 11:01

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('description', models.TextField(blank=True, max_length=1000, null=True)),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='date creation')),
                ('last_update', models.DateTimeField(auto_now=True, verbose_name='last updated')),
                ('url', models.URLField()),
                ('general_rating', models.IntegerField(validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)])),
                ('vignette', models.ImageField(upload_to='images')),
                ('hidden_full_cost', models.IntegerField(validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)])),
                ('crapometer', models.IntegerField(validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)])),
                ('in_hall_of_shame', models.BooleanField()),
                ('descriptionOfShame', models.TextField(max_length=1000)),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_related_type', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
            ],
            options={
                'ordering': ['date_creation', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Filter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('description', models.TextField(blank=True, max_length=1000, null=True)),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='date creation')),
                ('last_update', models.DateTimeField(auto_now=True, verbose_name='last updated')),
                ('is_positive', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_related_type', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
            ],
            options={
                'ordering': ['date_creation', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Platform',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('description', models.TextField(blank=True, max_length=1000, null=True)),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='date creation')),
                ('last_update', models.DateTimeField(auto_now=True, verbose_name='last updated')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_related_type', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
            ],
            options={
                'ordering': ['date_creation', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Company_group',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='filtershop_main.entity')),
                ('company_logo', models.ImageField(upload_to='')),
            ],
            options={
                'ordering': ['date_creation', 'name'],
                'abstract': False,
            },
            bases=('filtershop_main.entity',),
        ),
        migrations.CreateModel(
            name='Software',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='filtershop_main.entity')),
                ('software_type', models.CharField(max_length=300)),
                ('ethical_rating', models.IntegerField(validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)])),
                ('clarity_rating', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)])),
                ('heaviness', models.IntegerField(default=50, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)])),
                ('do_the_minimum', models.IntegerField(default=50, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)])),
                ('spotlight_count', models.IntegerField(default=0)),
                ('they_have_made_it', models.IntegerField()),
            ],
            options={
                'ordering': ['date_creation', 'name'],
                'abstract': False,
            },
            bases=('filtershop_main.entity',),
        ),
        migrations.CreateModel(
            name='Videogame_common',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='filtershop_main.entity')),
                ('game_type', models.CharField(max_length=300)),
                ('gameplay_rating', models.IntegerField(validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)])),
                ('known_popularity', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)])),
                ('spotlight_count', models.IntegerField(default=0)),
                ('they_have_made_it', models.IntegerField()),
                ('platforms', models.ManyToManyField(to='filtershop_main.platform')),
            ],
            options={
                'ordering': ['date_creation', 'name'],
                'abstract': False,
            },
            bases=('filtershop_main.entity',),
        ),
        migrations.CreateModel(
            name='ValueForFilter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('description', models.TextField(blank=True, max_length=1000, null=True)),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='date creation')),
                ('last_update', models.DateTimeField(auto_now=True, verbose_name='last updated')),
                ('value', models.IntegerField(default=50)),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_related_type', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('filter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='filtershop_main.filter')),
                ('for_entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='filtershop_main.entity')),
            ],
            options={
                'ordering': ['date_creation', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TypeOfShop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('description', models.TextField(blank=True, max_length=1000, null=True)),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='date creation')),
                ('last_update', models.DateTimeField(auto_now=True, verbose_name='last updated')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_related_type', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('filters', models.ManyToManyField(to='filtershop_main.filter')),
            ],
            options={
                'ordering': ['date_creation', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TypeOfEntity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('description', models.TextField(blank=True, max_length=1000, null=True)),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='date creation')),
                ('last_update', models.DateTimeField(auto_now=True, verbose_name='last updated')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_related_type', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('filters', models.ManyToManyField(to='filtershop_main.filter')),
            ],
            options={
                'ordering': ['date_creation', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('description', models.TextField(blank=True, max_length=1000, null=True)),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='date creation')),
                ('last_update', models.DateTimeField(auto_now=True, verbose_name='last updated')),
                ('good_or_bad', models.IntegerField()),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_related_type', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('parent_tag', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='filtershop_main.tag')),
            ],
            options={
                'ordering': ['date_creation', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Studio_type',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('description', models.TextField(blank=True, max_length=1000, null=True)),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='date creation')),
                ('last_update', models.DateTimeField(auto_now=True, verbose_name='last updated')),
                ('size', models.IntegerField()),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_related_type', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
            ],
            options={
                'ordering': ['date_creation', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Studio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('description', models.TextField(blank=True, max_length=1000, null=True)),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='date creation')),
                ('last_update', models.DateTimeField(auto_now=True, verbose_name='last updated')),
                ('url', models.URLField()),
                ('they_have_made_it', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(3), django.core.validators.MinValueValidator(0)])),
                ('money_rating', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)])),
                ('fully_rotten', models.BooleanField(default=0, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)])),
                ('in_hall_of_shame', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_related_type', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='filtershop_main.studio_type')),
            ],
            options={
                'ordering': ['date_creation', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Sponsor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('description', models.TextField(blank=True, max_length=1000, null=True)),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='date creation')),
                ('last_update', models.DateTimeField(auto_now=True, verbose_name='last updated')),
                ('url', models.URLField()),
                ('sponsor_logo', models.ImageField(upload_to='')),
                ('in_hall_of_shame', models.BooleanField()),
                ('descriptionOfShame', models.TextField(max_length=1000)),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_related_type', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
            ],
            options={
                'ordering': ['date_creation', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Shop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('description', models.TextField(blank=True, max_length=1000, null=True)),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='date creation')),
                ('last_update', models.DateTimeField(auto_now=True, verbose_name='last updated')),
                ('url', models.URLField()),
                ('identity', models.ImageField(upload_to='')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_related_type', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
            ],
            options={
                'ordering': ['date_creation', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Publisher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('description', models.TextField(blank=True, max_length=1000, null=True)),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='date creation')),
                ('last_update', models.DateTimeField(auto_now=True, verbose_name='last updated')),
                ('size', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(10), django.core.validators.MinValueValidator(0)])),
                ('url', models.URLField()),
                ('they_have_made_it', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(3), django.core.validators.MinValueValidator(0)])),
                ('money_rating', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)])),
                ('fully_rotten', models.BooleanField(default=False)),
                ('in_hall_of_shame', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_related_type', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
            ],
            options={
                'ordering': ['date_creation', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('description', models.TextField(blank=True, max_length=1000, null=True)),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='date creation')),
                ('last_update', models.DateTimeField(auto_now=True, verbose_name='last updated')),
                ('full_name', models.CharField(max_length=300)),
                ('biography', models.TextField(max_length=3000)),
                ('nb_of_articles', models.IntegerField(default=0, editable=False)),
                ('avatar', models.ImageField(default='avatar.jpg', upload_to='profile_avatars')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_related_type', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['date_creation', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Links_to_shops',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('description', models.TextField(blank=True, max_length=1000, null=True)),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='date creation')),
                ('last_update', models.DateTimeField(auto_now=True, verbose_name='last updated')),
                ('link', models.URLField()),
                ('identity', models.CharField(max_length=300)),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_related_type', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('for_Entity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='filtershop_main.entity')),
                ('shop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='filtershop_main.shop')),
            ],
            options={
                'ordering': ['date_creation', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('description', models.TextField(blank=True, max_length=1000, null=True)),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='date creation')),
                ('last_update', models.DateTimeField(auto_now=True, verbose_name='last updated')),
                ('title', models.CharField(max_length=20)),
                ('photo', models.ImageField(upload_to='images')),
                ('Entity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='filtershop_main.entity')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_related_type', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
            ],
            options={
                'ordering': ['date_creation', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Entity_Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('description', models.TextField(blank=True, max_length=1000, null=True)),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='date creation')),
                ('last_update', models.DateTimeField(auto_now=True, verbose_name='last updated')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_related_type', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('for_Entity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='filtershop_main.entity')),
            ],
            options={
                'ordering': ['date_creation', 'name'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='entity',
            name='for_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_related_type', to='filtershop_main.typeofentity'),
        ),
        migrations.AddField(
            model_name='entity',
            name='tags',
            field=models.ManyToManyField(related_name='%(app_label)s_%(class)s_related_tags', to='filtershop_main.tag'),
        ),
        migrations.CreateModel(
            name='Alias',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('description', models.TextField(blank=True, max_length=1000, null=True)),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='date creation')),
                ('last_update', models.DateTimeField(auto_now=True, verbose_name='last updated')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_related_type', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('for_entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='filtershop_main.entity')),
            ],
            options={
                'ordering': ['date_creation', 'name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Videogame_rating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('description', models.TextField(blank=True, max_length=1000, null=True)),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='date creation')),
                ('last_update', models.DateTimeField(auto_now=True, verbose_name='last updated')),
                ('f2play', models.BooleanField(default=False)),
                ('f2pay', models.BooleanField(default=False)),
                ('gameplay_rating', models.IntegerField()),
                ('money_rating', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)])),
                ('good_wo_iap', models.IntegerField(default=-1, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(-1)])),
                ('good_wo_ads', models.IntegerField(default=-1, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(-1)])),
                ('ads_supported', models.IntegerField(default=-1, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(-1)])),
                ('fully_rotten', models.BooleanField(default=False)),
                ('would_be_good_if', models.TextField(max_length=1000)),
                ('could_be_good_if', models.TextField(max_length=1000)),
                ('use_psycho_tech', models.IntegerField(default=0)),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_related_type', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('platform', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='filtershop_main.platform')),
                ('Videogame_common', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='filtershop_main.videogame_common')),
            ],
            options={
                'ordering': ['date_creation', 'name'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='videogame_common',
            name='publishers',
            field=models.ManyToManyField(to='filtershop_main.publisher'),
        ),
        migrations.AddField(
            model_name='videogame_common',
            name='studios',
            field=models.ManyToManyField(to='filtershop_main.studio'),
        ),
        migrations.CreateModel(
            name='Physical_shop',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='filtershop_main.entity')),
                ('shop_type', models.CharField(max_length=300)),
                ('ethical_rating', models.IntegerField(validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)])),
                ('clarity_rating', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)])),
                ('spotlight_count', models.IntegerField(default=0)),
                ('they_have_made_it', models.IntegerField()),
                ('shop_logo', models.ImageField(upload_to='')),
                ('group', models.ManyToManyField(to='filtershop_main.company_group')),
            ],
            options={
                'ordering': ['date_creation', 'name'],
                'abstract': False,
            },
            bases=('filtershop_main.entity',),
        ),
    ]
